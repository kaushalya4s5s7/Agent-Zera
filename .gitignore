# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For PyCharm
#  Community Edition, use 'PyCharm CE'.  For PyCharm Professional Edition, use 'PyCharm'.
.idea/

# Visual Studio Code
.vscode/
*.code-workspace

# Local History for Visual Studio Code
.history/

# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# Project-specific ignores
# ======================

# Database files
*.db
*.sqlite
*.sqlite3
memory.db
zera_audit_memory.db

# API keys and sensitive configuration
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
config.json
secrets.json
api_keys.json

# Log files
*.log
logs/
debug.log
error.log
audit.log

# Temporary files
temp/
tmp/
*.tmp
*.temp

# Agent response files (may contain sensitive data)
agent_response_*.txt
agent_responses/

# Test files and outputs
test_outputs/
test_results/
debug_output/
*_test_output.txt

# Corrupted/backup files
*.corrupted
*.backup
*_backup.py
*_corrupted_backup.py

# Contract files (potentially containing proprietary code)
contracts/
test_contracts/
*.sol

# Large model files
models/
*.model
*.pkl
*.joblib

# Documentation build
docs/build/

# Streamlit cache and secrets
.streamlit/
streamlit_cache/

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Coverage reports
htmlcov/
.coverage

# OS generated files
.DS_Store?
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
*.swp
*.swo
*~

# Node.js (if using any frontend components)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# AI/ML specific
# ===============

# Weights and model files
*.weights
*.h5
*.pt
*.pth
*.ckpt
*.safetensors

# Dataset files
data/
datasets/
*.csv
*.json (if containing large datasets)
*.parquet

# Training outputs
runs/
logs/
tensorboard/
wandb/

# Cache directories
.cache/
__pycache__/
.pytest_cache/
.mypy_cache/

# Development and testing artifacts
# =================================

# Debug scripts
debug_*.py
test_*.py (except actual test files you want to keep)
scratch_*.py
playground_*.py

# Output files from debugging
output_*.txt
results_*.json
analysis_*.log

# Temporary shell scripts
*.sh (except start_zera.sh which should be kept)
!start_zera.sh

# Performance profiling
*.prof
*.profile

# Memory dumps
*.dump
core.*
